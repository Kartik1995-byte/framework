<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="6" passed="5" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-01-22T17:58:26 IST" name="Suite" finished-at="2023-01-22T17:59:26 IST" duration-ms="59808">
    <groups>
    </groups>
    <test started-at="2023-01-22T17:58:26 IST" name="Test" finished-at="2023-01-22T17:59:26 IST" duration-ms="59808">
      <class name="tests.LogGeneration">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:tests.LogGeneration@183ec003]" started-at="2023-01-22T17:59:00 IST" name="beforeClass" finished-at="2023-01-22T17:59:04 IST" duration-ms="3784" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="loginGen()[pri:0, instance:tests.LogGeneration@183ec003]" started-at="2023-01-22T17:59:04 IST" name="loginGen" finished-at="2023-01-22T17:59:05 IST" duration-ms="1368" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginGen -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:tests.LogGeneration@183ec003]" started-at="2023-01-22T17:59:04 IST" name="beforeMethod" finished-at="2023-01-22T17:59:04 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:tests.LogGeneration@183ec003]" started-at="2023-01-22T17:59:05 IST" name="afterMethod" finished-at="2023-01-22T17:59:06 IST" duration-ms="133" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:tests.LogGeneration@183ec003]" started-at="2023-01-22T17:59:06 IST" name="afterClass" finished-at="2023-01-22T17:59:06 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- tests.LogGeneration -->
      <class name="tests.LoginTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:tests.LoginTest@7ce69770]" started-at="2023-01-22T17:58:26 IST" name="beforeClass" finished-at="2023-01-22T17:58:35 IST" duration-ms="8982" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:tests.LoginTest@7ce69770]" started-at="2023-01-22T17:58:35 IST" name="beforeMethod" finished-at="2023-01-22T17:58:35 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="login()[pri:0, instance:tests.LoginTest@7ce69770]" started-at="2023-01-22T17:58:35 IST" name="login" finished-at="2023-01-22T17:58:36 IST" duration-ms="1042" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at tests.LoginTest.login(LoginTest.java:53)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:tests.LoginTest@7ce69770]" started-at="2023-01-22T17:58:36 IST" name="afterMethod" finished-at="2023-01-22T17:58:36 IST" duration-ms="198" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:tests.LoginTest@7ce69770]" started-at="2023-01-22T17:58:36 IST" name="afterClass" finished-at="2023-01-22T17:58:36 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- tests.LoginTest -->
      <class name="tests.ExampleDataProvider">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:tests.ExampleDataProvider@7d9d0818]" started-at="2023-01-22T17:59:06 IST" name="beforeClass" finished-at="2023-01-22T17:59:06 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:tests.ExampleDataProvider@7d9d0818]" started-at="2023-01-22T17:59:06 IST" name="beforeMethod" finished-at="2023-01-22T17:59:09 IST" duration-ms="3946" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="loginData(java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:tests.ExampleDataProvider@7d9d0818]" started-at="2023-01-22T17:59:09 IST" name="loginData" data-provider="getLoginData" finished-at="2023-01-22T17:59:11 IST" duration-ms="1513" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[kart@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Kart@123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Successfull]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginData -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:tests.ExampleDataProvider@7d9d0818]" started-at="2023-01-22T17:59:11 IST" name="afterMethod" finished-at="2023-01-22T17:59:11 IST" duration-ms="174" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:tests.ExampleDataProvider@7d9d0818]" started-at="2023-01-22T17:59:11 IST" name="beforeMethod" finished-at="2023-01-22T17:59:14 IST" duration-ms="2900" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="loginData(java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:tests.ExampleDataProvider@7d9d0818]" started-at="2023-01-22T17:59:14 IST" name="loginData" data-provider="getLoginData" finished-at="2023-01-22T17:59:25 IST" duration-ms="11280" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[some@fmg.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[dummy]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Failure]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginData -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:tests.ExampleDataProvider@7d9d0818]" started-at="2023-01-22T17:59:25 IST" name="afterMethod" finished-at="2023-01-22T17:59:26 IST" duration-ms="185" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:tests.ExampleDataProvider@7d9d0818]" started-at="2023-01-22T17:59:26 IST" name="afterClass" finished-at="2023-01-22T17:59:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- tests.ExampleDataProvider -->
      <class name="tests.LogGeneration2">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:tests.LogGeneration2@7c137fd5]" started-at="2023-01-22T17:58:36 IST" name="beforeClass" finished-at="2023-01-22T17:58:36 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:tests.LogGeneration2@7c137fd5]" started-at="2023-01-22T17:58:36 IST" name="beforeMethod" finished-at="2023-01-22T17:58:43 IST" duration-ms="6643" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="loginGen2(java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:tests.LogGeneration2@7c137fd5]" started-at="2023-01-22T17:58:43 IST" name="loginGen2" data-provider="getLoginData" finished-at="2023-01-22T17:58:45 IST" duration-ms="1454" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[kart@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Kart@123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Successfull]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginGen2 -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:tests.LogGeneration2@7c137fd5]" started-at="2023-01-22T17:58:45 IST" name="afterMethod" finished-at="2023-01-22T17:58:45 IST" duration-ms="121" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:tests.LogGeneration2@7c137fd5]" started-at="2023-01-22T17:58:45 IST" name="beforeMethod" finished-at="2023-01-22T17:58:49 IST" duration-ms="3931" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="loginGen2(java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:tests.LogGeneration2@7c137fd5]" started-at="2023-01-22T17:58:49 IST" name="loginGen2" data-provider="getLoginData" finished-at="2023-01-22T17:59:00 IST" duration-ms="11340" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[some@fmg.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[dummy]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Failure]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginGen2 -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:tests.LogGeneration2@7c137fd5]" started-at="2023-01-22T17:59:00 IST" name="afterMethod" finished-at="2023-01-22T17:59:00 IST" duration-ms="240" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:tests.LogGeneration2@7c137fd5]" started-at="2023-01-22T17:59:00 IST" name="afterClass" finished-at="2023-01-22T17:59:00 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- tests.LogGeneration2 -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
